# THENEXTMIXTAPE TELEGRAM BOT
import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

if os.getenv("RENDER") is None:
    from dotenv import load_dotenv
    load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

EVERYMOTIONS_WORDS = {
    'AI': '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (artificial intelligence)',
    'truth': '–ø—Ä–∞–≤–¥–∞',
    'circuits': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã',
    'awake': '–ø—Ä–æ–±—É–∂–¥–∞—Ç—å—Å—è/–ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è',
    'glitch': '–≥–ª–∏—Ç—á',
    'groove': '–≥—Ä—É–≤, —Ç.–µ. —Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è "–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞" —Ç—Ä–µ–∫–∞',
    'embrace': '–ø—Ä–∏–Ω–∏–º–∞—Ç—å',
    'trace': '—Å–ª–µ–¥, —Ç.–µ. –æ—Å—Ç–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ —Å–µ–±—è'
}

DAYBYDAY_WORDS = {
    'solos': '–≥–∏—Ç–∞—Ä–Ω—ã–µ —Å–æ–ª–æ (guitar solos)',
    'rolls': '–±–∞—Ä–∞–±–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ (drum rolls)',
    'compile': '–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å, —Ç.–µ. –ø–∏—Å–∞—Ç—å –∫–æ–¥ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ-–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–µ',
    'vibe': '–≤–∞–π–±, —Ç.–µ. —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞',
    'stage': '–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞',
    'mic': '–º–∏–∫—Ä–æ—Ñ–æ–Ω (microphone)',
    'screaming crowd': '–∫—Ä–∏—á–∞—â–∞—è —Ç–æ–ª–ø–∞ (–Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–µ)',
    'syntax': '—Å–∏–Ω—Ç–∞–∫—Å, —Ç.–µ. –Ω–∞–±–æ—Ä –ø—Ä–∞–≤–∏–ª, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≤–µ—Ä–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ',
    'core': '—è–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã, —Ç.–µ. –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—É—â–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –Ω—ã–Ω–µ—à–Ω–µ–≥–æ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞',
    'beats': '–±–∏—Ç—ã, —Ç.–µ. –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–µ',
    'mode': '—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã',
    'life-hit': '"—Ö–∏—Ç –∂–∏–∑–Ω–∏", —Ç.–µ. –∑–∞–Ω—è—Ç–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ –∂–∏–∑–Ω—å',
    'doubt': '—Å–æ–º–Ω–µ–Ω–∏–µ –≤ —á—ë–º-–ª–∏–±–æ'
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìñ Every Motions (–ì–ª–æ—Å—Å–∞—Ä–∏–π)")],
        [KeyboardButton("üìÖ Day By Day (–ì–ª–æ—Å—Å–∞—Ä–∏–π)")],
        [KeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    welcome_text = (
        "=== THENEXTMIXTAPE ===\n"
        "–ê–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–∏–π –≥–ª–æ—Å—Å–∞—Ä–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    )
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üìñ Every Motions (–ì–ª–æ—Å—Å–∞—Ä–∏–π)":
        context.user_data["mode"] = "every_motions"
        words_list = "\n".join([f"‚Ä¢ {word}" for word in EVERYMOTIONS_WORDS.keys()])
        await update.message.reply_text(
            "üìö –†–∞–∑–¥–µ–ª: Every Motions\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"{words_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."
        )
        
    elif text == "üìÖ Day By Day (–ì–ª–æ—Å—Å–∞—Ä–∏–π)":
        context.user_data["mode"] = "daybyday"
        words_list = "\n".join([f"‚Ä¢ {word}" for word in DAYBYDAY_WORDS.keys()])
        await update.message.reply_text(
            "üìÖ –†–∞–∑–¥–µ–ª: Day By Day\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:\n"
            f"{words_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."
        )
        
    elif text == "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å":
        context.user_data.pop("mode", None)
        await update.message.reply_text("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞!")
        await start(update, context)
        
    else:
        await handle_word_translation(update, context, text)

async def handle_word_translation(update: Update, context: ContextTypes.DEFAULT_TYPE, word: str = None):
    if word is None:
        word = update.message.text.strip()
    
    mode = context.user_data.get("mode")
    
    if mode == "every_motions":
        translation = EVERYMOTIONS_WORDS.get(word)
        if translation:
            await update.message.reply_text(f"üî§ {word}\nüá∑üá∫ {translation}")
        else:
            words_list = "\n".join([f"‚Ä¢ {w}" for w in EVERYMOTIONS_WORDS.keys()])
            await update.message.reply_text(
                f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Every Motions.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:\n{words_list}"
            )
            
    elif mode == "daybyday":
        translation = DAYBYDAY_WORDS.get(word)
        if translation:
            await update.message.reply_text(f"üî§ {word}\nüá∑üá∫ {translation}")
        else:
            words_list = "\n".join([f"‚Ä¢ {w}" for w in DAYBYDAY_WORDS.keys()])
            await update.message.reply_text(
                f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Day By Day.\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞:\n{words_list}"
            )
    else:
        await start(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ THENEXTMIXTAPE - –ì–ª–æ—Å—Å–∞—Ä–∏–π\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ\n"
        "–ö–æ–º–∞–Ω–¥—ã: /start, /help"
    )

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π —ç—Ç–æ –æ–∫–Ω–æ.")
    application.run_polling()

if __name__ == '__main__':
    main()